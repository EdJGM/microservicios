# ========== CATALOGO SERVICE ==========
apiVersion: apps/v1
kind: Deployment
metadata:
  name: catalogo-service
  namespace: publicaciones-system
  labels:
    app: catalogo-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: catalogo-service
  template:
    metadata:
      labels:
        app: catalogo-service
    spec:
      containers:
        - name: catalogo-service
          image: josue122121/ms-catalogo:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
          env:
            # Spring Application
            - name: SPRING_APPLICATION_NAME
              value: "SERVICIO-CATALOGO"
            - name: SERVER_PORT
              value: "8080"

            # Database Configuration
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://postgres-catalogo:5432/db-catalogo"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: "org.hibernate.dialect.PostgreSQLDialect"

            # RabbitMQ Configuration
            - name: SPRING_RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: rabbitmq-host
            - name: SPRING_RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: rabbitmq-port
            - name: SPRING_RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: username
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: password

            # Eureka Configuration
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: eureka-url
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            - name: EUREKA_INSTANCE_INSTANCE_ID
              value: "${SPRING_APPLICATION_NAME}:${HOSTNAME}"

            # Management
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "*"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"

          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 10
            timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: catalogo-service
  namespace: publicaciones-system
  labels:
    app: catalogo-service
spec:
  selector:
    app: catalogo-service
  ports:
    - port: 8080
      targetPort: 8080
      name: http
  type: ClusterIP
---
# ========== NOTIFICACIONES SERVICE ==========
apiVersion: apps/v1
kind: Deployment
metadata:
  name: notificaciones-service
  namespace: publicaciones-system
  labels:
    app: notificaciones-service
spec:
  replicas: 2
  selector:
    matchLabels:
      app: notificaciones-service
  template:
    metadata:
      labels:
        app: notificaciones-service
    spec:
      containers:
        - name: notificaciones-service
          image: josue122121/ms-notificaciones:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8080
              name: http
          env:
            # Spring Application
            - name: SPRING_APPLICATION_NAME
              value: "SERVICIO-NOTIFICACIONES"
            - name: SERVER_PORT
              value: "8080"

            # Database Configuration
            - name: SPRING_DATASOURCE_URL
              value: "jdbc:postgresql://postgres-notificaciones:5432/db-notificaciones"
            - name: SPRING_DATASOURCE_USERNAME
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: username
            - name: SPRING_DATASOURCE_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: postgres-credentials
                  key: password
            - name: SPRING_JPA_HIBERNATE_DDL_AUTO
              value: "update"
            - name: SPRING_JPA_PROPERTIES_HIBERNATE_DIALECT
              value: "org.hibernate.dialect.PostgreSQLDialect"

            # RabbitMQ Configuration
            - name: SPRING_RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: rabbitmq-host
            - name: SPRING_RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: rabbitmq-port
            - name: SPRING_RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: username
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: password

            # Eureka Configuration
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: eureka-url
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            - name: EUREKA_INSTANCE_INSTANCE_ID
              value: "${SPRING_APPLICATION_NAME}:${HOSTNAME}"

            # Management
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "*"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"

          resources:
            requests:
              memory: "512Mi"
              cpu: "200m"
            limits:
              memory: "1Gi"
              cpu: "500m"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8080
            initialDelaySeconds: 90
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8080
            initialDelaySeconds: 45
            periodSeconds: 10
            timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: notificaciones-service
  namespace: publicaciones-system
  labels:
    app: notificaciones-service
spec:
  selector:
    app: notificaciones-service
  ports:
    - port: 8080
      targetPort: 8080
      name: http
  type: ClusterIP
---
# ========== SINCRONIZACION SERVICE ==========
apiVersion: apps/v1
kind: Deployment
metadata:
  name: sincronizacion-service
  namespace: publicaciones-system
  labels:
    app: sincronizacion-service
spec:
  replicas: 1  # Solo 1 replica para evitar tareas duplicadas
  selector:
    matchLabels:
      app: sincronizacion-service
  template:
    metadata:
      labels:
        app: sincronizacion-service
    spec:
      containers:
        - name: sincronizacion-service
          image: josue122121/sincronizacion:latest
          imagePullPolicy: Always
          ports:
            - containerPort: 8083
              name: http
          env:
            # Spring Application
            - name: SPRING_APPLICATION_NAME
              value: "SERVICIO-SINCRONIZACION"
            - name: SERVER_PORT
              value: "8083"

            # RabbitMQ Configuration
            - name: SPRING_RABBITMQ_HOST
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: rabbitmq-host
            - name: SPRING_RABBITMQ_PORT
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: rabbitmq-port
            - name: SPRING_RABBITMQ_USERNAME
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: username
            - name: SPRING_RABBITMQ_PASSWORD
              valueFrom:
                secretKeyRef:
                  name: rabbitmq-credentials
                  key: password

            # Eureka Configuration
            - name: EUREKA_CLIENT_SERVICE_URL_DEFAULTZONE
              valueFrom:
                configMapKeyRef:
                  name: service-config
                  key: eureka-url
            - name: EUREKA_CLIENT_FETCH_REGISTRY
              value: "true"
            - name: EUREKA_CLIENT_REGISTER_WITH_EUREKA
              value: "true"
            - name: EUREKA_INSTANCE_PREFER_IP_ADDRESS
              value: "true"
            - name: EUREKA_INSTANCE_INSTANCE_ID
              value: "${SPRING_APPLICATION_NAME}:${HOSTNAME}"

            # Reloj Configuration (para el intervalo de sincronizaci√≥n)
            - name: RELOJ_INTERVALO
              value: "10"

            # Management
            - name: MANAGEMENT_ENDPOINTS_WEB_EXPOSURE_INCLUDE
              value: "*"
            - name: MANAGEMENT_ENDPOINT_HEALTH_SHOW_DETAILS
              value: "always"

          resources:
            requests:
              memory: "256Mi"
              cpu: "100m"
            limits:
              memory: "512Mi"
              cpu: "300m"
          livenessProbe:
            httpGet:
              path: /actuator/health
              port: 8083
            initialDelaySeconds: 60
            periodSeconds: 30
            timeoutSeconds: 10
          readinessProbe:
            httpGet:
              path: /actuator/health/readiness
              port: 8083
            initialDelaySeconds: 30
            periodSeconds: 10
            timeoutSeconds: 5
---
apiVersion: v1
kind: Service
metadata:
  name: sincronizacion-service
  namespace: publicaciones-system
  labels:
    app: sincronizacion-service
spec:
  selector:
    app: sincronizacion-service
  ports:
    - port: 8083
      targetPort: 8083
      name: http
  type: ClusterIP